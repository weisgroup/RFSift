// Generated by gencpp from file mynt_eye_ros_wrapper/GetInfoRequest.msg
// DO NOT EDIT!


#ifndef MYNT_EYE_ROS_WRAPPER_MESSAGE_GETINFOREQUEST_H
#define MYNT_EYE_ROS_WRAPPER_MESSAGE_GETINFOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mynt_eye_ros_wrapper
{
template <class ContainerAllocator>
struct GetInfoRequest_
{
  typedef GetInfoRequest_<ContainerAllocator> Type;

  GetInfoRequest_()
    : key(0)  {
    }
  GetInfoRequest_(const ContainerAllocator& _alloc)
    : key(0)  {
  (void)_alloc;
    }



   typedef uint32_t _key_type;
  _key_type key;



  enum {
    DEVICE_NAME = 0u,
    SERIAL_NUMBER = 1u,
    FIRMWARE_VERSION = 2u,
    HARDWARE_VERSION = 3u,
    SPEC_VERSION = 4u,
    LENS_TYPE = 5u,
    IMU_TYPE = 6u,
    NOMINAL_BASELINE = 7u,
    AUXILIARY_CHIP_VERSION = 8u,
    ISP_VERSION = 9u,
    IMG_INTRINSICS = 10u,
    IMG_EXTRINSICS_RTOL = 11u,
    IMU_INTRINSICS = 12u,
    IMU_EXTRINSICS = 13u,
  };


  typedef boost::shared_ptr< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetInfoRequest_

typedef ::mynt_eye_ros_wrapper::GetInfoRequest_<std::allocator<void> > GetInfoRequest;

typedef boost::shared_ptr< ::mynt_eye_ros_wrapper::GetInfoRequest > GetInfoRequestPtr;
typedef boost::shared_ptr< ::mynt_eye_ros_wrapper::GetInfoRequest const> GetInfoRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mynt_eye_ros_wrapper

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "602bbca6ddbb76b6b1b7cc64d2c89cca";
  }

  static const char* value(const ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x602bbca6ddbb76b6ULL;
  static const uint64_t static_value2 = 0xb1b7cc64d2c89ccaULL;
};

template<class ContainerAllocator>
struct DataType< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mynt_eye_ros_wrapper/GetInfoRequest";
  }

  static const char* value(const ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 DEVICE_NAME=0\n\
uint32 SERIAL_NUMBER=1\n\
uint32 FIRMWARE_VERSION=2\n\
uint32 HARDWARE_VERSION=3\n\
uint32 SPEC_VERSION=4\n\
uint32 LENS_TYPE=5\n\
uint32 IMU_TYPE=6\n\
uint32 NOMINAL_BASELINE=7\n\
uint32 AUXILIARY_CHIP_VERSION=8\n\
uint32 ISP_VERSION=9\n\
uint32 IMG_INTRINSICS=10\n\
uint32 IMG_EXTRINSICS_RTOL=11\n\
uint32 IMU_INTRINSICS=12\n\
uint32 IMU_EXTRINSICS=13\n\
uint32 key\n\
";
  }

  static const char* value(const ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mynt_eye_ros_wrapper::GetInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.key);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYNT_EYE_ROS_WRAPPER_MESSAGE_GETINFOREQUEST_H
